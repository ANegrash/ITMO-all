-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2019.1
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity p_hls_fptosi_float_i is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    x : IN STD_LOGIC_VECTOR (31 downto 0);
    ap_return : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of p_hls_fptosi_float_i is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv9_181 : STD_LOGIC_VECTOR (8 downto 0) := "110000001";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv8_7F : STD_LOGIC_VECTOR (7 downto 0) := "01111111";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv32_37 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110111";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (1 downto 0) := "01";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal p_Result_s_reg_185 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Val2_5_fu_166_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Val2_5_reg_190 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Val2_s_fu_44_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_V_1_fu_66_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal mantissa_V_fu_70_p4 : STD_LOGIC_VECTOR (24 downto 0);
    signal tmp_V_fu_56_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln339_fu_84_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln339_fu_88_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal sub_ln1311_fu_102_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal isNeg_fu_94_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal sext_ln1311_fu_108_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal ush_fu_112_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal sext_ln1311_1_fu_120_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln1311_2_fu_124_p1 : STD_LOGIC_VECTOR (24 downto 0);
    signal zext_ln682_fu_80_p1 : STD_LOGIC_VECTOR (78 downto 0);
    signal zext_ln1287_fu_128_p1 : STD_LOGIC_VECTOR (78 downto 0);
    signal r_V_fu_132_p2 : STD_LOGIC_VECTOR (24 downto 0);
    signal tmp_fu_144_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal r_V_1_fu_138_p2 : STD_LOGIC_VECTOR (78 downto 0);
    signal zext_ln662_fu_152_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_1_fu_156_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal result_V_1_fu_174_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (1 downto 0);


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                p_Result_s_reg_185 <= p_Val2_s_fu_44_p1(31 downto 31);
                p_Val2_5_reg_190 <= p_Val2_5_fu_166_p3;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XX";
        end case;
    end process;
    add_ln339_fu_88_p2 <= std_logic_vector(signed(ap_const_lv9_181) + signed(zext_ln339_fu_84_p1));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    ap_return <= 
        result_V_1_fu_174_p2 when (p_Result_s_reg_185(0) = '1') else 
        p_Val2_5_reg_190;
    isNeg_fu_94_p3 <= add_ln339_fu_88_p2(8 downto 8);
    mantissa_V_fu_70_p4 <= ((ap_const_lv1_1 & tmp_V_1_fu_66_p1) & ap_const_lv1_0);
    p_Val2_5_fu_166_p3 <= 
        zext_ln662_fu_152_p1 when (isNeg_fu_94_p3(0) = '1') else 
        tmp_1_fu_156_p4;
    p_Val2_s_fu_44_p1 <= x;
    r_V_1_fu_138_p2 <= std_logic_vector(shift_left(unsigned(zext_ln682_fu_80_p1),to_integer(unsigned('0' & zext_ln1287_fu_128_p1(31-1 downto 0)))));
    r_V_fu_132_p2 <= std_logic_vector(shift_right(unsigned(mantissa_V_fu_70_p4),to_integer(unsigned('0' & sext_ln1311_2_fu_124_p1(25-1 downto 0)))));
    result_V_1_fu_174_p2 <= std_logic_vector(unsigned(ap_const_lv32_0) - unsigned(p_Val2_5_reg_190));
        sext_ln1311_1_fu_120_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(ush_fu_112_p3),32));

        sext_ln1311_2_fu_124_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(ush_fu_112_p3),25));

        sext_ln1311_fu_108_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sub_ln1311_fu_102_p2),9));

    sub_ln1311_fu_102_p2 <= std_logic_vector(unsigned(ap_const_lv8_7F) - unsigned(tmp_V_fu_56_p4));
    tmp_1_fu_156_p4 <= r_V_1_fu_138_p2(55 downto 24);
    tmp_V_1_fu_66_p1 <= p_Val2_s_fu_44_p1(23 - 1 downto 0);
    tmp_V_fu_56_p4 <= p_Val2_s_fu_44_p1(30 downto 23);
    tmp_fu_144_p3 <= r_V_fu_132_p2(24 downto 24);
    ush_fu_112_p3 <= 
        sext_ln1311_fu_108_p1 when (isNeg_fu_94_p3(0) = '1') else 
        add_ln339_fu_88_p2;
    zext_ln1287_fu_128_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln1311_1_fu_120_p1),79));
    zext_ln339_fu_84_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_V_fu_56_p4),9));
    zext_ln662_fu_152_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_fu_144_p3),32));
    zext_ln682_fu_80_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(mantissa_V_fu_70_p4),79));
end behav;
